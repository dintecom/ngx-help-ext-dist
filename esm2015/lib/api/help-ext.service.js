import { HttpClient } from '@angular/common/http';
import { ElementRef, Inject, Injectable, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { isObservable, of, throwError } from 'rxjs';
import { catchError, finalize, map, mergeMap, share, shareReplay, tap } from 'rxjs/operators';
import { HelpExtUrlResolver, HELP_EXT_CACHE_LIFETIME_TOKEN, HELP_EXT_HTTP_HEADERS, HELP_EXT_URL_TOKEN, } from '../help-ext.config';
export const cacheLifetimeSecondDefault = 30 * 60;
export class HelpExtService {
    constructor(helpExtUrlResolver, _http, _sanitizer, helpExtUrl, cacheLifetimeSecond, _httpHeaders) {
        this._http = _http;
        this._sanitizer = _sanitizer;
        this._httpHeaders = _httpHeaders;
        this.cacheById = {};
        this.requestCacheById = {};
        this.cacheByUid = {};
        this.requestCacheByUid = {};
        this.cacheByUrl = {};
        this.requestCacheByUrl = {};
        if (helpExtUrlResolver) {
            const resolved = helpExtUrlResolver.resolve();
            if (typeof resolved === 'string') {
                this.baseAddress = of(resolved).pipe(shareReplay(1));
            }
            else if (isObservable(resolved)) {
                this.baseAddress = resolved.pipe(shareReplay(1));
            }
            else {
                throw Error('Not supported helpExtUrlResolver');
            }
        }
        else if (helpExtUrl) {
            this.baseAddress = of(helpExtUrl).pipe(shareReplay(1));
        }
        else {
            throw Error('Please, configure helpExtUrl or helpExtUrlResolver');
        }
        this.cacheLifetime = cacheLifetimeSecond * 1000;
    }
    getArticleById(id) {
        return this.baseAddress.pipe(mergeMap(baseAddress => this.cachedGet(this.cacheById, this.requestCacheById, id, `${baseAddress}/api/Clients/GetArticleById/${id}`)));
    }
    getArticleByUid(siteOrigin, uid) {
        return this.baseAddress.pipe(mergeMap(baseAddress => this.cachedGet(this.cacheByUid, this.requestCacheByUid, uid, `${baseAddress}/api/Clients/GetArticleByUid?siteOrigin=${encodeURIComponent(siteOrigin)}&uid=${encodeURIComponent(uid)}`)));
    }
    getArticleByUrl(url) {
        return this.baseAddress.pipe(mergeMap(baseAddress => this.cachedGet(this.cacheByUrl, this.requestCacheByUrl, url, `${baseAddress}/api/Clients/GetArticleByUrl?url=${encodeURIComponent(url)}`)));
    }
    sanitizeContent(content) {
        return this._sanitizer.sanitize(SecurityContext.HTML, this._sanitizer.bypassSecurityTrustHtml(content));
    }
    makeAbsoluteLinks(element, baseAddress, linkTarget) {
        const el = element instanceof ElementRef ? element.nativeElement : element;
        const links = el.getElementsByTagName('a');
        for (let i = 0; i < links.length; i++) {
            if (linkTarget) {
                links[i].setAttribute('target', linkTarget);
            }
            let href = links[i].getAttribute('href');
            if (/(?:^[a-z][a-z0-9+.-]*:|\/\/)/.test(href))
                continue;
            href = `${baseAddress}/${href}`;
            links[i].setAttribute('href', href);
        }
    }
    cachedGet(cache, requestCache, key, httpUrl) {
        if (cache[key]) {
            return cache[key].error ? throwError(cache[key].error) : of(cache[key].article);
        }
        if (requestCache[key])
            return requestCache[key];
        const request = {};
        if (this._httpHeaders) {
            request.headers = this._httpHeaders;
        }
        requestCache[key] = this._http.get(httpUrl, request).pipe(map(a => a), tap(a => {
            delete requestCache[key];
            cache[key] = {
                article: a,
            };
        }), catchError(e => {
            delete requestCache[key];
            cache[key] = {
                error: e,
            };
            return throwError(e);
        }), finalize(() => {
            setTimeout(() => delete cache[key], this.cacheLifetime);
        }), share());
        return requestCache[key];
    }
}
HelpExtService.decorators = [
    { type: Injectable }
];
HelpExtService.ctorParameters = () => [
    { type: HelpExtUrlResolver },
    { type: HttpClient },
    { type: DomSanitizer },
    { type: String, decorators: [{ type: Inject, args: [HELP_EXT_URL_TOKEN,] }] },
    { type: Number, decorators: [{ type: Inject, args: [HELP_EXT_CACHE_LIFETIME_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [HELP_EXT_HTTP_HEADERS,] }] }
];
//# sourceMappingURL=data:application/json;base64,